{"version":3,"sources":["index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"../lib","sourcesContent":["export const currentPropertiesInArray = Object.getOwnPropertyNames(\n    Array.prototype\n);\n\nif (!currentPropertiesInArray.includes('tail')) {\n    Object.defineProperty(Array.prototype, 'tail', {\n        value<T>(n: number) {\n            return (this as T[])[(this as T[]).length - (1 + n)];\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('coalesce')) {\n    Object.defineProperty(Array.prototype, 'coalesce', {\n        value<T>() {\n            if (!(this as T[])) {\n                return this as T[];\n            }\n            return (this as T[]).filter(e => !!e);\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('distinct')) {\n    Object.defineProperty(Array.prototype, 'distinct', {\n        value<T>() {\n            const seen = new Set<T>();\n            return (this as T[]).filter(element => {\n                if (seen.has(element)) {\n                    return false;\n                }\n\n                seen.add(element);\n                return true;\n            });\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('lastIndex')) {\n    Object.defineProperty(Array.prototype, 'lastIndex', {\n        value<T>(fn: (item: T) => boolean) {\n            for (let i = (this as T[]).length - 1; i >= 0; i--) {\n                const element = (this as T[])[i];\n\n                if (fn(element)) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('firstIndex')) {\n    Object.defineProperty(Array.prototype, 'firstIndex', {\n        value<T>(fn: (item: T) => boolean) {\n            for (let i = 0; i < (this as T[]).length; i++) {\n                const element = (this as T[])[i];\n\n                if (fn(element)) {\n                    return i;\n                }\n            }\n\n            return -1;\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('firstOrDefault')) {\n    Object.defineProperty(Array.prototype, 'firstOrDefault', {\n        value<T>(fn: (item: T) => boolean, notFoundValue?: T) {\n            const index = (this as T[]).firstIndex(fn);\n            return index < 0 ? notFoundValue : (this as T[])[index];\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('first')) {\n    Object.defineProperty(Array.prototype, 'first', {\n        value<T>() {\n            return (this as T[]).slice(0, 1)[0];\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('last')) {\n    Object.defineProperty(Array.prototype, 'last', {\n        value<T>() {\n            return (this as T[]).slice(-1)[0];\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('toHashMap')) {\n    Object.defineProperty(Array.prototype, 'toHashMap', {\n        value<T>(key?: string) {\n            const flattenedArray: { [key: string]: any } = {};\n\n            (this as T[]).forEach((a, i) => {\n                flattenedArray[key ? (a as any)[key] : i] = a;\n            });\n\n            return flattenedArray;\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('diff')) {\n    Object.defineProperty(Array.prototype, 'diff', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = [\n                    ...a.filter(x => !b.includes(x)).map(x => JSON.parse(x)),\n                    ...b.filter(x => !a.includes(x)).map(x => JSON.parse(x))\n                ];\n                return difference;\n            } else {\n                const difference = [\n                    ...arr.filter(x => !other.includes(x)),\n                    ...other.filter(x => !arr.includes(x))\n                ];\n                return difference;\n            }\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('diffLeft')) {\n    Object.defineProperty(Array.prototype, 'diffLeft', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = a\n                    .filter(x => !b.includes(x))\n                    .map(x => JSON.parse(x));\n                return difference;\n            } else {\n                const difference = arr.filter(x => !other.includes(x));\n                return difference;\n            }\n        }\n    });\n}\n\nif (!currentPropertiesInArray.includes('diffRight')) {\n    Object.defineProperty(Array.prototype, 'diffRight', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = b\n                    .filter(x => !a.includes(x))\n                    .map(x => JSON.parse(x));\n                return difference;\n            } else {\n                const difference = other.filter(x => !arr.includes(x));\n                return difference;\n            }\n        }\n    });\n}\n"]}