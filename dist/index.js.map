{"version":3,"sources":["index.ts"],"names":[],"mappings":";AA+MC,aAAA,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,mDAAA,SAAA,EAAA,GAAA,GAAA,OAAA,YAAA,OAAA,IAAA,uBAAA,OAAA,UAAA,SAAA,KAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,CAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,EAAA,QAAA,EAAA,EAAA,OAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,GAAA,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GAAA,OAAA,eAAA,QAAA,aAAA,CAAA,OAAA,IAAA,QAAA,8BAAA,EA/MM,IAAM,EAA2B,OAAO,oBAAoB,MAAM,WA+MxE,QAAA,yBAAA,EA7MI,EAAyB,SAAS,SACnC,OAAO,eAAe,MAAM,UAAW,OAAQ,CAC3C,MAAS,SAAA,GACG,OAAA,KAAc,KAAa,QAAU,EAAI,OAKxD,EAAyB,SAAS,aACnC,OAAO,eAAe,MAAM,UAAW,WAAY,CAC/C,MAAK,WACG,OAAE,KAGE,KAAa,OAAO,SAAA,GAAK,QAAE,IAFxB,QAOlB,EAAyB,SAAS,aACnC,OAAO,eAAe,MAAM,UAAW,WAAY,CAC/C,MAAK,WACK,IAAA,EAAO,IAAI,IACT,OAAA,KAAa,OAAO,SAAA,GACpB,OAAA,EAAK,IAAI,KAIb,EAAK,IAAI,IACF,QAMlB,EAAyB,SAAS,cACnC,OAAO,eAAe,MAAM,UAAW,YAAa,CAChD,MAAS,SAAA,GACA,IAAA,IAAI,EAAK,KAAa,OAAS,EAAG,GAAK,EAAG,IAAK,CAG5C,GAAA,EAFa,KAAa,IAGnB,OAAA,EAIR,OAAC,KAKf,EAAyB,SAAS,eACnC,OAAO,eAAe,MAAM,UAAW,aAAc,CACjD,MAAS,SAAA,GACA,IAAA,IAAI,EAAI,EAAG,EAAK,KAAa,OAAQ,IAAK,CAGvC,GAAA,EAFa,KAAa,IAGnB,OAAA,EAIR,OAAC,KAKf,EAAyB,SAAS,mBACnC,OAAO,eAAe,MAAM,UAAW,iBAAkB,CACrD,MAAS,SAAA,EAA0B,GACzB,IAAA,EAAS,KAAa,WAAW,GAChC,OAAA,EAAQ,EAAI,EAAiB,KAAa,MAKxD,EAAyB,SAAS,UACnC,OAAO,eAAe,MAAM,UAAW,QAAS,CAC5C,MAAK,WACO,OAAA,KAAa,MAAM,EAAG,GAAG,MAKxC,EAAyB,SAAS,SACnC,OAAO,eAAe,MAAM,UAAW,OAAQ,CAC3C,MAAK,WACO,OAAA,KAAa,OAAO,GAAG,MAKtC,EAAyB,SAAS,cACnC,OAAO,eAAe,MAAM,UAAW,YAAa,CAChD,MAAS,SAAA,GACgC,IAAA,EAAA,GAAW,CAAE,YAAa,GAAI,YAAa,IAAxE,EAAA,EAAA,YAAa,EAAA,EAAA,YACf,EAAyC,GAkBxC,OAhBO,KAAA,QAAQ,SAAC,EAAG,GAClB,IAAA,EAAM,EAAe,EAAU,GAAe,GAAe,EAC7D,EAAQ,EAER,GAAW,EAAQ,YAEnB,EAAM,EAAQ,UAAU,IAGxB,GAAW,EAAQ,cACnB,EAAQ,EAAQ,YAAY,IAGhC,EAAe,GAAO,IAGnB,KAKd,EAAyB,SAAS,SACnC,OAAO,eAAe,MAAM,UAAW,OAAQ,CAC3C,MAAS,SAAA,GACC,IAAA,EAAM,KAER,GAAqB,WAArB,EADc,EAAI,SACa,CACzB,IAAA,EAAI,EAAI,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAChC,EAAK,EAAc,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAG1C,MADgB,GAAA,OAAA,EAAA,EAAE,OAAO,SAAA,GAAK,OAAC,EAAE,SAAS,KAAI,IAAI,SAAA,GAAK,OAAA,KAAK,MAAM,MAAQ,EAAA,EAAE,OAAO,SAAA,GAAK,OAAC,EAAE,SAAS,KAAI,IAAI,SAAA,GAAK,OAAA,KAAK,MAAM,OAI5H,MADgB,GAAA,OAAA,EAAA,EAAI,OAAO,SAAA,GAAK,OAAC,EAAM,SAAS,MAAQ,EAAA,EAAM,OAAO,SAAA,GAAK,OAAC,EAAI,SAAS,UAO1G,EAAyB,SAAS,aACnC,OAAO,eAAe,MAAM,UAAW,WAAY,CAC/C,MAAS,SAAA,GAGD,GAAqB,WAArB,EAFQ,KACU,SACa,CACzB,IAAA,EAHE,KAGM,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAChC,EAAK,EAAc,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAG1C,OADY,EAAE,OAAO,SAAA,GAAK,OAAC,EAAE,SAAS,KAAI,IAAI,SAAA,GAAK,OAAA,KAAK,MAAM,KAI9D,OAVC,KASe,OAAO,SAAA,GAAK,OAAC,EAAM,SAAS,QAO9D,EAAyB,SAAS,cACnC,OAAO,eAAe,MAAM,UAAW,YAAa,CAChD,MAAS,SAAA,GACC,IAAA,EAAM,KAER,GAAqB,WAArB,EADc,EAAI,SACa,CACzB,IAAA,EAAI,EAAI,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAI/B,OAHI,EAAc,IAAI,SAAA,GAAK,OAAA,KAAK,UAAU,KAE5B,OAAO,SAAA,GAAK,OAAC,EAAE,SAAS,KAAI,IAAI,SAAA,GAAK,OAAA,KAAK,MAAM,KAI9D,OADY,EAAM,OAAO,SAAA,GAAK,OAAC,EAAI,SAAS,QAO9D,EAAyB,SAAS,YACnC,OAAO,eAAe,MAAM,UAAW,UAAW,CAC9C,MAAS,SAAA,GACC,IACA,EAAI,IAAI,IAFA,GAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAIE,IAAA,IAAK,EAAL,EAHJ,KAGS,OAAA,cAAA,GAAA,EAAA,EAAA,QAAA,MAAA,GAAA,EAAA,CAAV,IAAA,EAAU,EAAA,MACX,EAAK,EAAE,MAAM,KAAK,OAAO,SAAC,EAAG,GAAO,OAAA,EAAU,IAAI,GAClD,EAAW,EAAE,IAAI,GAClB,EAGD,EAAE,IAAI,EAAQ,GAAA,OAAA,EAAA,GAAU,CAAA,KAFxB,EAAE,IAAI,EAAI,CAAC,KARL,MAAA,GAAA,GAAA,EAAA,EAAA,EAAA,QAAA,IAAA,GAAA,MAAA,EAAA,QAAA,EAAA,SAAA,QAAA,GAAA,EAAA,MAAA,GAcP,OAAA,MAAM,KAAK,EAAE,UAAU,UAKrC,EAAyB,SAAS,iBACnC,OAAO,eAAe,MAAM,UAAW,eAAgB,CACnD,MAAS,SAAA,GACC,IAAA,EAAO,IAAI,IAAI,MACf,EAAO,IAAI,IAAI,GACV,OAAA,EAAA,IAAI,IAAI,EAAI,GAAM,OAAO,SAAA,GAAK,OAAA,EAAK,IAAI","file":"index.js","sourceRoot":"../lib","sourcesContent":["export const currentPropertiesInArray = Object.getOwnPropertyNames(Array.prototype);\n\nif (!currentPropertiesInArray.includes('tail')) {\n    Object.defineProperty(Array.prototype, 'tail', {\n        value<T>(n: number) {\n            return (this as T[])[(this as T[]).length - (1 + n)];\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('coalesce')) {\n    Object.defineProperty(Array.prototype, 'coalesce', {\n        value<T>() {\n            if (!(this as T[])) {\n                return this as T[];\n            }\n            return (this as T[]).filter(e => !!e);\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('distinct')) {\n    Object.defineProperty(Array.prototype, 'distinct', {\n        value<T>() {\n            const seen = new Set<T>();\n            return (this as T[]).filter(element => {\n                if (seen.has(element)) {\n                    return false;\n                }\n\n                seen.add(element);\n                return true;\n            });\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('lastIndex')) {\n    Object.defineProperty(Array.prototype, 'lastIndex', {\n        value<T>(fn: (item: T) => boolean) {\n            for (let i = (this as T[]).length - 1; i >= 0; i--) {\n                const element = (this as T[])[i];\n\n                if (fn(element)) {\n                    return i;\n                }\n            }\n\n            return -1;\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('firstIndex')) {\n    Object.defineProperty(Array.prototype, 'firstIndex', {\n        value<T>(fn: (item: T) => boolean) {\n            for (let i = 0; i < (this as T[]).length; i++) {\n                const element = (this as T[])[i];\n\n                if (fn(element)) {\n                    return i;\n                }\n            }\n\n            return -1;\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('firstOrDefault')) {\n    Object.defineProperty(Array.prototype, 'firstOrDefault', {\n        value<T>(fn: (item: T) => boolean, notFoundValue?: T) {\n            const index = (this as T[]).firstIndex(fn);\n            return index < 0 ? notFoundValue : (this as T[])[index];\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('first')) {\n    Object.defineProperty(Array.prototype, 'first', {\n        value<T>() {\n            return (this as T[]).slice(0, 1)[0];\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('last')) {\n    Object.defineProperty(Array.prototype, 'last', {\n        value<T>() {\n            return (this as T[]).slice(-1)[0];\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('toHashMap')) {\n    Object.defineProperty(Array.prototype, 'toHashMap', {\n        value<T>(options?: { internalKey?: string; externalKey?: string; keyGetter?: (item: T) => string | number; valueGetter?: (item: T) => any }) {\n            const { internalKey, externalKey } = options || { internalKey: '', externalKey: '' };\n            const flattenedArray: { [key: string]: any } = {};\n\n            (this as T[]).forEach((a, i) => {\n                let key = internalKey ? (a as any)[internalKey] : externalKey || i;\n                let value = a;\n\n                if (options && options.keyGetter) {\n                    // There is a key getter defined so we will use that to grab the key instead\n                    key = options.keyGetter(a);\n                }\n\n                if (options && options.valueGetter) {\n                    value = options.valueGetter(a);\n                }\n\n                flattenedArray[key] = value;\n            });\n\n            return flattenedArray;\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('diff')) {\n    Object.defineProperty(Array.prototype, 'diff', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = [...a.filter(x => !b.includes(x)).map(x => JSON.parse(x)), ...b.filter(x => !a.includes(x)).map(x => JSON.parse(x))];\n                return difference;\n            } else {\n                const difference = [...arr.filter(x => !other.includes(x)), ...other.filter(x => !arr.includes(x))];\n                return difference;\n            }\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('diffLeft')) {\n    Object.defineProperty(Array.prototype, 'diffLeft', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = a.filter(x => !b.includes(x)).map(x => JSON.parse(x));\n                return difference;\n            } else {\n                const difference = arr.filter(x => !other.includes(x));\n                return difference;\n            }\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('diffRight')) {\n    Object.defineProperty(Array.prototype, 'diffRight', {\n        value<T>(other: T[]) {\n            const arr = this as T[];\n            const firstItem = arr.first();\n            if (typeof firstItem === 'object') {\n                const a = arr.map(x => JSON.stringify(x));\n                const b = (other as T[]).map(x => JSON.stringify(x));\n\n                const difference = b.filter(x => !a.includes(x)).map(x => JSON.parse(x));\n                return difference;\n            } else {\n                const difference = other.filter(x => !arr.includes(x));\n                return difference;\n            }\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('groupBy')) {\n    Object.defineProperty(Array.prototype, 'groupBy', {\n        value<T>(k: string) {\n            const arr = this as T[];\n            const m = new Map();\n\n            for (const v of arr) {\n                const kv = k.split('.').reduce((o, i) => (o as any)[i], v);\n                const existing = m.get(kv);\n                if (!existing) {\n                    m.set(kv, [v]);\n                } else {\n                    m.set(kv, [...existing, v]);\n                }\n            }\n\n            return Array.from(m.values()).flat();\n        },\n    });\n}\n\nif (!currentPropertiesInArray.includes('intersection')) {\n    Object.defineProperty(Array.prototype, 'intersection', {\n        value<T>(other: T[]) {\n            const aSet = new Set(this as T[]);\n            const bSet = new Set(other as T[]);\n            return [...new Set([...aSet].filter(x => bSet.has(x)))];\n        },\n    });\n}\n"]}